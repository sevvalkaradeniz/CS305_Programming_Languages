%{
#include "sevvalk-hw3.h"
#include "sevvalk-hw3.tab.h"

int nested = 0;
int lineCount = 1;
%}

tNEWLINE \n

tLOCALPART [A-Za-z0-9\-_]+(([A-Za-z0-9\-_]*|\.?)[A-Za-z0-9\-_])*
tDOMAIN [A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+|[A-Za-z0-9]{1}

/* Comments */
tSLC  "//" 
tOMLC "/\*" 
tCMLC "*/"   


%x singleLineComment multiLineComment
%%
{tSLC}  BEGIN(singleLineComment);
<singleLineComment>{tNEWLINE}    {
    lineCount++;
    BEGIN(INITIAL);
    }
<singleLineComment>.    ;


{tOMLC} {BEGIN(multiLineComment); ++nested;}
<multiLineComment>{tCMLC}      { if (--nested == 0) BEGIN(INITIAL); }
<multiLineComment>{tOMLC}     ++nested;
<multiLineComment>{tNEWLINE}    {lineCount++;} ;
<multiLineComment>.         ;

"Mail" return tMAIL;
"end"[ \t\n\r\f]+"Mail" {
    int i =0;
    while(yytext[i]!='\0'){      
        if(yytext[i]=='\n'){
            lineCount++;
        }
    i++;
    }
    return tENDMAIL;}
    
"schedule" return tSCHEDULE;
"end"[ \t\n\r\f]+"schedule" {
     int i =0;
    while(yytext[i]!='\0'){      
        if(yytext[i]=='\n'){
            lineCount++;
        }
    i++;
    }
    return tENDSCHEDULE;}

"send" return  tSEND;
"set" return tSET;
"to" return tTO;
"from" return tFROM;
@ return tAT;
, return tCOMMA;
: return tCOLON;
\( return tLPR;
\) return tRPR;
\[ return tLBR;
\] return tRBR;
[a-zA-Z\_]+[a-zA-Z0-9\_]* {
    yylval.identifierNode.lineNum = lineCount;
    yylval.identifierNode.variableName = strdup(yytext);;
    return tIDENT;
};
["][^\"]*["] {
    int length = strlen(yytext);
    memmove(yytext, yytext + 1, length - 2); 
    yytext[length - 2] = '\0';
    yylval.stringNode.lineNum = lineCount;
    yylval.stringNode.value = strdup(yytext);;
    int i =0;
    while(yytext[i]!='\0'){      
        if(yytext[i]=='\n'){
            lineCount++;
        }
    i++;
    }
    return tSTRING;
};

[0-9]{2}"/"[0-9]{2}"/"[0-9]{4}|[0-9]{2}\.[0-9]{2}\.[0-9]{4}|[0-9]{2}-[0-9]{2}-[0-9]{4} {
    yylval.dateNode.lineNum = lineCount;
    char* seperator = 0;
    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.dateNode.originalDate = result;
    if(strchr(yytext, '/') != NULL)
    {
        seperator = "/";
    }
    if(strchr(yytext, '-') != NULL)
    {
        seperator = "-";
    }
    if(strchr(yytext, '.') != NULL)
    {
        seperator = ".";
    }
    char * newYytext = strtok(yytext, seperator); //day
    yylval.dateNode.day= atoi(newYytext);
    newYytext = strtok(NULL, seperator); //month
    yylval.dateNode.month= atoi(newYytext);
    newYytext = strtok(NULL, seperator);//year
    yylval.dateNode.year= atoi(newYytext);
    return tDATE;
}

[0-9]{2}:[0-9]{2} {
    char* seperator= ":";
    yylval.timeNode.lineNum = lineCount;
    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.timeNode.originalTime = result;
    //sscanf(result, "%d:%d", yylval.timeNode.hour, yylval.timeNode.minute) == 2
    
    char * newYytext = strtok(yytext, seperator);
    yylval.timeNode.hour= atoi(newYytext);
    newYytext = strtok(NULL,seperator);
    yylval.timeNode.minute= atoi(newYytext);
    
    return tTIME;
}

{tLOCALPART}"@"({tDOMAIN}"."{tDOMAIN}"."{tDOMAIN}|{tDOMAIN}"."{tDOMAIN}) {
    yylval.mailNode.lineNum = lineCount;
    yylval.mailNode.email = strdup(yytext);
    return tADDRESS;
    }

[ \t]+
{tNEWLINE}    {lineCount++;}
.	    return yytext[0];
%%
